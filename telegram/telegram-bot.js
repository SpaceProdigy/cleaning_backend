import dayjs from "dayjs";
import TelegramBot from "node-telegram-bot-api";
import schedule from "node-schedule";
import { dinamicModel } from "../models/cleaningSchedules.js";

const { TELEGRAM_BOT_KEY } = process.env;
const token = TELEGRAM_BOT_KEY;
const chatId = -1002236250541;

console.log("–ë–æ—Ç –∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è...");

const bot = new TelegramBot(token, { polling: true });

bot.on("polling_error", (error) => {
  console.error("–û—à–∏–±–∫–∞ polling:", error);
});

console.log("–ë–æ—Ç —É—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω!");

// bot.on("message", (msg) => {
//   const chatId = msg.forward_from_chat?.id || msg.chat.id;
//   console.log("Chat ID:", chatId);
//   bot.sendMessage(chatId, "–í–∞—à chatId: " + chatId);
// });

const corridorChatMap = {
  blueCorridor: -1002236250541, // –ì—Ä—É–ø–ø–∞ –¥–ª—è —Å–∏–Ω–∏–µ–≥–æ –∫–æ—Ä–∏–¥–æ—Ä–∞
  kitchen4: -1002166625361, // –ì—Ä—É–ø–ø–∞ –¥–ª—è –∫—É—Ö–Ω–∏ 4
};

const corridors = [
  "blueCorridor",
  "redCorridor",
  "yellowCorridor",
  "kitchen3",
  "kitchen4",
  "kitchen5",
  "kitchen6",
];

const options = {
  parse_mode: "HTML",
  reply_markup: {
    inline_keyboard: [
      [
        {
          text: "–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ",
          url: "https://spaceprodigy.github.io/cleaning_frontend/",
        },
      ],
    ],
  },
};

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è
const schedulesReminder = async () => {
  try {
    // –°–æ–±–∏—Ä–∞–µ–º –≤—Å–µ –∑–∞–¥–∞—á–∏ –∏–∑ –≤—Å–µ—Ö –∫–æ–ª–ª–µ–∫—Ü–∏–π
    const tasksByCorridor = {};

    await Promise.all(
      corridors.map(async (corridor) => {
        const tasks = await dinamicModel(corridor).find({
          date: dayjs().format("YYYY-MM-DD"),
        });
        if (tasks.length) tasksByCorridor[corridor] = tasks;
      })
    );

    for (const [corridor, tasks] of Object.entries(tasksByCorridor)) {
      const chatId = corridorChatMap[corridor]; // –ü–æ–ª—É—á–∞–µ–º ID —á–∞—Ç–∞

      if (!chatId) {
        console.log(`–ù–µ—Ç —á–∞—Ç–∞ –¥–ª—è ${corridor}, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º.`);
        continue;
      }

      const message = `<b>üì£ –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ / Reminder</b> 

–°–µ–≥–æ–¥–Ω—è <b>${dayjs().format(
        "DD.MM.YYYY"
      )}</b>, –∞ —ç—Ç–æ –∑–Ω–∞—á–∏—Ç, —á—Ç–æ –ø–æ—Ä–∞ –Ω–µ–º–Ω–æ–≥–æ –ø—Ä–∏–±—Ä–∞—Ç—å—Å—è! üßπ‚ú® 

Today is <b>${dayjs().format(
        "DD.MM.YYYY"
      )}</b>, which means it's time to do some tidying up! üßπ‚ú®    

–ù–∞ –æ—á–µ—Ä–µ–¥–∏ –∫–æ–º–Ω–∞—Ç—ã / Next up are the rooms:

${tasks
  .map(
    ({ roomNumber, task }) =>
      `<b>‚û°Ô∏è ${roomNumber} - ${task.ua} / ${task.en}</b>`
  )
  .join("\n\n")}

–ï—Å–ª–∏ —É–±–æ—Ä–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞, –ø—Ä–æ—Å—å–±–∞ –æ—Ç–ø–∏—Å–∞—Ç—å—Å—è –≤ –≥—Ä—É–ø–ø—É –∏ —Å–∫–∏–Ω—É—Ç—å —Ñ–æ—Ç–æ! –°–ø–∞—Å–∏–±–æ –∑–∞ —É—á–∞—Å—Ç–∏–µ! üôå

If the cleaning is done, please write to the group and send a photo! Thank you for participating! üôå

 üìå –≠—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏. / This message was sent automatically.
`;
      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ Telegram
      await bot.sendMessage(chatId, message, options);
      console.log("–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ.");
    }
  } catch (error) {
    console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è:", error);
  }
};

// –ü–ª–∞–Ω–∏—Ä—É–µ–º –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ —Ñ—É–Ω–∫—Ü–∏–∏ –∫–∞–∂–¥—ã–π –¥–µ–Ω—å –≤ 8:00
schedule.scheduleJob("0 8 * * *", () => {
  schedulesReminder();
});
