import mongoose from "mongoose";
import app from "./app.js";
import { bot } from "./telegram/telegram-bot.js";
import "./telegram/reminders/autoReminder.js";
// npx ngrok http 3000

const { DB_HOST, PORT } = process.env;
const WEBHOOK_URL = "https://cleaning-backend.onrender.com/webhook";

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ Webhook –æ—Ç Telegram
app.post("/webhook", (req, res) => {
  bot.processUpdate(req.body); // Telegram –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—é–¥–∞
  res.sendStatus(200);
});

mongoose
  .connect(DB_HOST)
  .then(async () => {
    app.listen(PORT || 3000, async () => {
      console.log(`üöÄ Server running on port ${PORT}`);

      try {
        // –ü—Ä—è–º–æ —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º Webhook, –±–µ–∑ –ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏
        const result = await bot.setWebHook(WEBHOOK_URL);
        if (result) {
          console.log(`‚úÖ Webhook —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –Ω–∞ ${WEBHOOK_URL}`);
        } else {
          console.error("‚ùå –û—à–∏–±–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ Webhook");
        }
      } catch (error) {
        console.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É—Å—Ç–∞–Ω–æ–≤–∫–µ Webhook:", error);
      }
    });
  })
  .catch((error) => {
    console.log("‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ MongoDB:", error.message);
    process.exit(1);
  });
